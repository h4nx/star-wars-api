service: star-wars-api

plugins:
  - serverless-typescript
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    STAGE: ${self:provider.stage}
    PERSONAJES_TABLE: ${self:provider.stage}-PersonajesStarWars
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ PersonajesTable, Arn ]

functions:
  crearPersonaje:
    handler: src/handlers/personajes.crear
    events:
      - http:
          path: personajes
          method: post
          cors: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  properties:
                    swapiId:
                      type: number
                  required:
                    - swapiId

  listarPersonajes:
    handler: src/handlers/personajes.listar
    events:
      - http:
          path: personajes
          method: get
          cors: true

resources:
  Resources:
    PersonajesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PERSONAJES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.PERSONAJES_TABLE}
            sources: [./seeds/personajes.json]